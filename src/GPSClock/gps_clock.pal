/==================================================================
/	FILE: 			GPS_CLOCK.PAL
/	PROJECT:		PDP-8 - GPS CLOCK
/	AUTHOR:			RON K. IRVINE
/	COPYRIGHT:		(C) COPYRIGHT, RON K. IRVINE, 2021. ALL RIGHTS RESERVED.
/
/	DESCRIPTION:	PDP-8 CORE WITH GPS INTERFACE FOR DE10-LITE BOARD
/
/	NOTES:
/
/	LINKS:
/
/	CREATED:		RKI - NOV 2021
/
/	RCS:			$ID: RISCV_CPU.V,V 1.2 2021/12/07 15:24:54 RON EXP $
/
/==================================================================


/GPS INTERFACE
GPSSKP=6431					/ GPS - SKIP IF CHAR AVAILABLE
GPSKIE=6435					/ GPS - INTERUPT ENABLE
GPSRCV=6436					/ GPS - READ CHARACTER AND CLEAR THE FLAG
GPSTCF=6442					/ GPS - CLEAR THE PRINTER FLAG

/ DE10 INTERFACE
D10S0=6470					/ DE10 - 7 SEGMENT 0
D10S1=6471					/ DE10 - 7 SEGMENT 1
D10S2=6472					/ DE10 - 7 SEGMENT 2
D10S3=6473					/ DE10 - 7 SEGMENT 3
D10S4=6474					/ DE10 - 7 SEGMENT 4
D10S5=6475					/ DE10 - 7 SEGMENT 5
D10IN=6476					/ DE10 - READ, NOT IMPLEMENTED
D10LED=6477					/ DE10 - OUTPUT TO LEDS


/ SOME CONSTANTS
NL0000=7300					/ 0000, CLA CLL
NL0001=7301					/ 0001, CLA CLL LAC
NL0002=7305					/ 0002, CLA CLL LAC RAL
NL0003=7325					/ 0003, CLA CLL CML LAC RAL
NL0004=7307					/ 0004, CLA CLL LAC RTL
NL0006=7327					/ 0006, CLA CLL CML LAC RTL
NL0100=7303					/ 0100, CLA LAC BSW
NL2000=7332					/ 1024, CLA CLL CML RTR
NL3777=7360					/ 2047, CLA CLL CMA RAR
NL4000=7330					/ -0,	CLA CLL CML RAR
NL6777=7362					/ -1026, CLA CLL CMA RTL
NL6000=7333					/ -1024, CLA CLL CML LAC RTR
NL7775=7346					/ -3, CLA CLL CMA RTL
NL7776=7344					/ -2, CLA CLL CMA RAL
NL7777=7340					/ -1, CLA CLL CMA

/ KIE=6035					/ FOR KEYBOARD

		*0000
		0000				/ INTERRUPT RETURN ADDRESS
		JMP I .+1
		IRQSVR				/ INTERRUPT SERVICE ROUTINE

SAVEAC,	0000
SAVEL,	0000
IRQCNT,	0000				/ COUNT INTERRUPTS

		*0010
AIX1,	0000				/ TEMP FOR AUTO INDEXING
AIX2,	0000				/ TEMP FOR AUTO INDEXING

		*0020
ARG1,	0000				/ FUNCTION ARGUMENTS
ARG2,	0000
ARG3,	0000
ARG4,	0000

TMP1,	0000				/ TEMP VARIABLES
TMP2,	0000


TTYCH,	0000				/ IF !=0, TTY RECIEVED CHARACTER
CHAR,	0000				/ IF !=0, GPS RECIEVED CHARACTER

/ CONSTANTS
BMASK,	0377
CMASK,	0177
DOLLAR,	"$					/ GPS MESSAGE START
STAR,	"*					/ GPS MESSAGE END, CHECKSUM
CR,		215					/ CARRAGE RETURN
K0200,	0200
K5252,	5252
K0037,	0037
K0300,	0300
K0017,	0017
INDEX,	0					/ GENERAL INDEX

/ GPS MESSAGE BUFFER
GPSBUF,	MSGBUF				/ USE BIN/RIM LOADER SPACE
GPSCNT,	0					/ CHARS IN THE BUFFER
STATE,	STATE0				/ CURRENT STATE; 0 = IDLE, 1 = '$', 2 = '*'
SADDR0,	STATE0
SADDR1,	STATE1
SADDR2,	STATE2
SADDR3,	STATE3
GPSSUM,	0					/ GPS CHECKSUM (SUM BETWEEN '$' AND '*')
GPSCHK,	0					/ GPS CHECKSUM (SUM BETWEEN '$' AND '*')
DOGPS,	0					/ FLAG FOR GPS MESSAGE READY TO PROCESS

/ GPS TIME
HOUR,	0000				/ HOUR IN BCD
MINUTE,	0000				/ MINUTE IN BCD
SECOND,	0000				/ SECOND IN BCD
TZ,		7					/ BANGKOK
MHR24,	7750				/ -24, CORRECTION FOR 24 HR ROLLOVER
NMEAOK,	0000				/ NON-ZERO = OK


HEXF,	HEXFUN				/ CONVERT AC HEX CHAR TO VALUE
XOR,	XORFUN				/ EXCLUSIVE OR FUNCTION
DISPLAY,SEGFUN				/ DISPLAY THE AC ON 7 SEGMENTS
BIN2BCD,BINBCD				/ CONVERT BIN TO BCD
BCD2BIN,BCDBIN				/ CONVERT BCD TO BIN



/===========================================================
/	START
/===========================================================
		*0200				/ LOCATE PROGRAM STARTING AT ADDR 200
START,	CLA					/ CLEAR ACCUMULATOR
		CLL					/ CLEAR AC LINK
		NL0100				/ '-'
		D10S0				/ CLEAR 7 SEG DISPLAY
		D10S1				/ CLEAR 7 SEG DISPLAY
		D10S2				/ CLEAR 7 SEG DISPLAY
		D10S3				/ CLEAR 7 SEG DISPLAY
		D10S4				/ CLEAR 7 SEG DISPLAY
		D10S5				/ CLEAR 7 SEG DISPLAY
		LAS					/ READ THE SWITCH REGISTER
		D10LED				/ DISPLAY SWITCH REGISTER
		AND K0037
		DCA TZ				/ SAVE SR[4..0]
		GPSTCF				/ GPS - CLEAR THE PRINTER FLAG
		CLA IAC				/ AC = 1 (ENABLE)
		GPSKIE				/ GPS - INTERRUPT ENABLE
		NL7777				/ OUTPUT A FEW DELS TO SYNC
		JMS TTYO
		JMS TTYO
		TAD HELLO			/ HELLO STRING
		JMS PUTS
		CLA CMA
		KIE					/ ENABLE TTY INTERRUPTS
		ION

MAIN,	CLA CLL
		TAD TTYCH			/ WAIT FOR NEXT CHARACTER
		SNA
		JMP MAIN2
		AND CMASK
		TLS					/ ECHO - WRITE AC TO THE OUTPUT DEVICE (TTY)
		/ CLA
		/ TAD TTYCH
		CLA					/ CHAR <= 0, INDICATE FINISHED
		DCA TTYCH

MAIN2,	JMS GPS				/ PROCESS ANY INCOMING GPS CHARACTERS

MAIN3,	CLA CLL
		TAD DOGPS
		SNA					/ MESSAGE WAITING?
		JMP MAIN
		JMS NMEA			/ PROCESS GPS MESSAGE
		CLA CLL
		DCA DOGPS			/ CLEAR THE FLAG
		JMP MAIN			/ WAIT FOR INTERRUPT


ECHO,	KSF					/ ANY CHARACTERS?
		JMP .-1
		KRB					/ READ THE CHAR
		TLS					/ WRITE AC TO THE OUTPUT DEVICE (TTY)
		TSF					/ IF TTY IS READY, SKIP NEXT INSTRUCTION.
		JMP .-1				/ TTY IS NOT READY, SO CHECK AGAIN
		JMP ECHO


PUTS,	0000				/ RETURN ADDRESS
		DCA AIX1			/ STORE THAT IN AUTOINDEX REG 1
PUTS1,	TAD I AIX1			/ INCR ADDR IN AIX1, THEN LOAD AC FROM THAT
		AND CMASK
		SNA					/ IF AC IS NOT ZERO, SKIP NEXT INSTRUCTION
		JMP I PUTS			/ RETURN
		JMS TTYO			/ CALL OUTPUT ROUTINE
		JMP PUTS1			/ REPEAT LOOP

NEXT,	HLT					/ HALT IF SIMULATION
		/ JMP GPS
		/ JMP ECHO

DONE,	HLT					/ THAT'S ALL FOLKS!
		JMP START			/ RESTART


TTYO,	0					/ TTY OUTPUT ROUTINE. THE FIRST WORD OF
							/ A SUBROUTINE MUST BE EMPTY (0) BECAUSE
							/ THE JMS INSTRUCTION INSERTS THE RETURN
							/ ADDR IN THIS WORD.
		TLS					/ WRITE AC TO THE OUTPUT DEVICE (TTY)
		TSF					/ IF TTY IS READY, SKIP NEXT INSTRUCTION.
		JMP .-1				/ TTY IS NOT READY, SO CHECK AGAIN
		CLA					/ CLEAR AC
		JMP I TTYO			/ RETURN TO CALLER

		HLT

HELLO,	.					/ 1ST WORD IS ADDR OF STRING
		014					/ <FF>
		015					/ <CR>
		012					/ <LF>
		110					/ H
		105					/ E
		114					/ L
		114					/ L
		117					/ O
		040					/
		127					/ W
		117					/ O
		122					/ R
		114					/ L
		104					/ D
		041					/ !
		015					/ <CR>
		012					/ <LF>
		000					/ <NUL>


		PAGE
/===========================================================
/	INTERRUPT SERVICE ROUTINE
/===========================================================
IRQSVR,	DCA SAVEAC
		RAL
		DCA SAVEL

		/ PRINTER DONE?
		TSF
		JMP .+2
		TCF

		/ KEYBOARD?
		KSF					/ ANY CHARACTERS?
		JMP IRQ1
		CLA
		KRB					/ READ THE CHAR
		DCA TTYCH

		/------------------------------
		/ GPS ...
		/------------------------------
IRQ1,	GPSTCF				/ GPS - CLEAR THE PRINTER FLAG
		GPSSKP				/ GPS - SKIP IF CHAR AVAILABLE
		JMP RETI
		GPSRCV				/ GPS - READ CHARACTER AND CLEAR THE FLAG
		AND CMASK			/ 7 BIT ASCII
		TAD K0200			/ SET BIT 7 HIGH
		/ D10LED
		JMS NEWCH
		JMP RETI

RETI,	CLA CLL
		TAD SAVEL
		RAR
		TAD SAVEAC
		ION					/ INTERRUPTS BACK ON AFTER JMP
		JMP I 0				/ RETURN FROM INTERRUPT



		PAGE
/===========================================================
/	GPS PROCESSING
/===========================================================
		PAGE
GPS,	0000
		JMS GETCH			/ GET NEXT CHAR
		SPA
		JMP I GPS			/ EOF, NOTHING THERE
		/ D10LED
		DCA CHAR
		/ READY TO PROCESS INTERRUPT
		TAD CHAR			/ IF CR, RESET TO STATE 0
		CIA
		TAD CR
		SZA
		JMP I STATE
		TAD SADDR0
		DCA STATE
		JMP I GPS

		/------------------------------
		/ SEARCH FOR '$', START OF MESSAGE
		/------------------------------
STATE0,	CLA
		TAD CHAR			/ IF '$', NEXT STATE
		CIA
		TAD DOLLAR
		SZA
		JMP I GPS
		TAD SADDR1
		DCA STATE
		DCA GPSSUM
		DCA GPSCNT
		JMP I GPS

		/------------------------------
		/ COLLECT MESSAGE
		/------------------------------
STATE1,	CLA
		TAD CHAR			/ IF '*', NEXT STATE
		CIA
		TAD STAR
		SZA
		JMP ST001
		TAD SADDR2
		DCA STATE
		JMP I GPS
ST001,	CLA
		/ TAD CHAR			/ ADD ANOTHER CHARACTER TO THE CHECKSUM
		/ AND CMASK			/ JUST 7 BIT ASCII SUM
		/ TAD GPSSUM
		/ AND BMASK			/ SUM IS 8 BITS ONLY
		/ DCA GPSSUM
		TAD CHAR			/ CHECKSUM IS XOR OF ALL CHARS BETWEEN '$' AND '*'
		AND CMASK			/ JUST 7 BIT ASCII SUM
		DCA ARG1
		TAD GPSSUM
		DCA ARG2
		JMS I XOR
		AND BMASK			/ SUM IS 8 BITS ONLY
		DCA GPSSUM
		TAD GPSBUF
		TAD GPSCNT			/ INCREMENT THE COUNT
		DCA INDEX
		TAD GPSCNT
		IAC
		AND CMASK			/ LIMIT TO 128 CHARACTERS
		DCA GPSCNT
		TAD CHAR
		DCA I INDEX			/ SAVE THE CHARACTER
		JMP I GPS


		/ GET 2 HEX CHECKSUM CHARS
STATE2,	CLA					/ 1'ST HEX OF CHECKSUM
		TAD SADDR3
		DCA STATE
		TAD CHAR
		JMS I HEXF
		CLL RTL
		RTL
		DCA GPSCHK
		JMP I GPS

STATE3,	CLA					/ 2'ND HEX OF CHECKSUM
		TAD SADDR0
		DCA STATE
		TAD CHAR			/ CONVERT TO HEX VALUE
		JMS I HEXF
		TAD GPSCHK
		DCA GPSCHK			/ ADD 2 HEX VALUES
		CLA
		TAD GPSSUM
		CIA					/ COMPARE TO CALCULATED VALUE
		TAD GPSCHK			/ AC==0, CHECKSUM IS OK!!!
		DCA GPSCHK
		TAD GPSCHK			/ IF MESSAGE OK
		SNA
		/ JMS NMEA		   / PROCESS THE MESSAGE
		ISZ DOGPS			/ HANDLE IN MAIN LOOP
		NOP
		JMP I GPS


/======================================================================
/	NMEA MESSAGE
/	$GPRMC,055223.00,A,2345.25774,N,12345.17913,E,1.826,,060221,,,A*7A
/======================================================================
		PAGE
GPRMC,	4235				/ HASH VALUE OF "GPRMC"
T5,		0000
NMEA,	0
		CLA
		DCA NMEAOK			/ SET OK, WHEN ALL IS OK
		/ TAD GPSCNT
		CLA CLL CMA			/ -1
		TAD GPSBUF			/ POINT TO START OF BUFFER
		DCA AIX1			/ USE AUTOINC INDEXING AND HASH THE 1ST 5 CHARS
		TAD I AIX1			/ SHOULD BE THE 1ST CHARACTER 'G'
		RAL
		TAD I AIX1			/ SHOULD BE THE 1ST CHARACTER 'P'
		RAL
		TAD I AIX1			/ SHOULD BE THE 1ST CHARACTER 'R'
		RAL
		TAD I AIX1			/ SHOULD BE THE 1ST CHARACTER 'M'
		RAL
		TAD I AIX1			/ SHOULD BE THE 1ST CHARACTER 'C', HASH = 4235
		CIA					/ NEGATE
		TAD GPRMC
		SZA					/ IF "GPRMC" MESSAGE ...
		JMP I NMEA			/ NOPE, NOT OUR MESSAGE

		/ TIME SHOULD BE NEXT FIELD
		TAD I AIX1			/ IGNORE THE COMMA

		/ COLLECT "HHMMSS" AS BCD HOUR,MINUTE,SECOND
		CLA					/ HOUR
		TAD I AIX1
		JMS ISDIGIT			/ CHECK FOR LEADING DIGIT
		SNA
		JMP NMBAD
		AND K0017
		RTL
		RTL
		DCA HOUR
		TAD I AIX1
		AND K0017
		TAD HOUR
		DCA HOUR			/ SAVE HOUR IN BCD

		TAD I AIX1			/ MINUTE
		AND K0017
		RTL
		RTL
		DCA MINUTE
		TAD I AIX1
		AND K0017
		TAD MINUTE
		DCA MINUTE			/ SAVE MINUTE IN BCD

		TAD I AIX1			/ SECOND
		AND K0017
		RTL
		RTL
		DCA SECOND
		TAD I AIX1
		JMS ISDIGIT			/ CHECK FOR TRAINING DIGIT
		SNA					/ ASSUME EVERYTHING OK
		JMP NMBAD
		AND K0017
		TAD SECOND
		DCA SECOND			/ SAVE SECOND IN BCD

		/ ADJUST FOR TIMEZONE AND DISPLAY
		JMS ADJTZ			/ ADJUST FOR TIMEZONE
		JMS DTIME
		NL0001
		DCA NMEAOK
		JMP I NMEA

NMBAD,	NL0100				/ '-'
		D10S0				/ CLEAR 7 SEG DISPLAY
		D10S1				/ CLEAR 7 SEG DISPLAY
		D10S2				/ CLEAR 7 SEG DISPLAY
		D10S3				/ CLEAR 7 SEG DISPLAY
		D10S4				/ CLEAR 7 SEG DISPLAY
		D10S5				/ CLEAR 7 SEG DISPLAY
		CLA
		DCA NMEAOK
		JMP I NMEA


		PAGE
/======================================================================
/	SUPPORT FUNCTIONS
/======================================================================
/ ISDIGIT - IS IT A VALID ASCII DIGIT
/	RETURN	- ASCII VALUE IF OK
/			0000 - ZERO IF BAD
ASCII0,	"0
ASCII9,	"9
T9,		0000
ISDIGIT, 0000
		DCA T9
		TAD ASCII0
		CIA
		TAD T9
		SPA
		JMP ISDBAD			/ LESS THAN '0'
		CLA
		TAD T9
		CIA
		TAD ASCII9
		SPA
		JMP ISDBAD			/ GREATER THAN '9'
		CLA
		TAD T9
		JMP I ISDIGIT
ISDBAD,	CLA					/ NOT A DIGIT, RETURN 0000
		JMP I ISDIGIT


		/------------------------------
		/ ADJUST HOUR FOR TIME ZONE
		/------------------------------
ADJTZ,	0000				/ NOW ADD TIMEZONE
		JMS READTZ
		CLA CLL
		TAD HOUR
		JMS BCDBIN			/ CONVERT BCD TO BINARY
		TAD TZ				/ ADD TIMEZONE ADJUST IN BINARY
		DCA TMP1			/ SAVE ADJUSTED TIME

		TAD TMP1			/ CHECK FOR 24HR OVERFLOW
		TAD MHR24			/ SUBTRACT 24HR
		SPA					/ IF <24HR, LOAD ORIGINAL VAULE, OTHERWISE NEW (HOUR-24) VALUE
		JMP ADJTZ1			/ NO ADJUSTMENT NEEDED
		DCA TMP1			/ SAVE ADJUSTMENT

ADJTZ1,	CLA
		TAD TMP1
		JMS BINBCD			/ CONVERT BACK TO BCD
		DCA HOUR
		JMP I ADJTZ

READTZ,	0000
		LAS					/ READ THE SWITCH REGISTER
		D10LED				/ DISPLAY SWITCH REGISTER
		AND K0037
		DCA TZ				/ SAVE SR[4..0]
		JMP I READTZ

		/ HEXFUN - CONVERT ASCII TO HEX
HEX0,	0
MZERO,	-0060				/ - '0'
MSEVEN,	-0007				/ -7
MTEN,	-0012				/ -10
HEXFUN,	0
		AND CMASK
		TAD MZERO
		DCA HEX0
		TAD HEX0
		TAD MTEN
		SMA					/ + = A-F
		JMP HEXAF
		CLA
		TAD HEX0			/ RETURN THE HEX
		JMP I HEXFUN

HEXAF,	CLA
		TAD HEX0
		TAD MSEVEN
		JMP I HEXFUN



/===========================================================
/	BCD MATH
/===========================================================
		PAGE
		/ BINARY TO BCD CONVERSION 3/6/65-DEC
		/ ENTER WITH BINARY NUMBER LESS THAN "999"
		/ IN ACCUMULATOR; EXIT WITH THREE CHARACTER
		/ BCD NUMBER IN ACCUMULATOR
		/ AC 0-3; AC 4-7; AC 8-11 WILL CONTAIN
		/ THE BCD CHARACTERS ON EXIT
		/ WEIGHTING: AC 0-3 100
		/			AC4-7 10
		/			AC 8-11 1
		/ STORAGE 33(10) REGISTERS

		/ TIME=216.0-235.2 MICRO-SECONDS PDP-8
		/ IF INPUT >999 (10) RESULT IS UNSPECIFIED
/EXAMPLE:	INPUT 0726 (8)
/			OUTPUT 0100/0111/0000 = 470 (10)
BINBCD,	0000
		DCA INPUT			/ STORE BINARY
		TAD CONTRL			/ SET UP TABLE
		DCA POINTR			/ POINTERS
		CLL
		TAD COUNT			/ SET BIT 7=1; 8RALS
		DCA NUMBER			/ WILL PUT IT IN LINK
		TAD INPUT
POINTR,	TAD TABLE			/ OR TABLE+1, TABLE+2, ETC.
		SZL					/ IF C(L)=1, INPUT>-TABLE
		DCA INPUT			/ IF SO: INPUT=INPUT+TABLE
		CLA
		TAD NUMBER
		RAL					/ PUT THIS BIT IN ANSWER
		ISZ POINTR			/ UPDATE TABLE POINTER
		SNL					/ IF LINK=1, ALL DONE
		JMP POINTR-2
		CLL RTL				/ CONVERTED 2 BCD
		RTL					/ CHARACTERS
		TAD INPUT			/ SHIFT LEFT AND ADD
		JMP I BINBCD		/ THE THIRD
CONTRL,	TAD TABLE
INPUT,	0000
NUMBER,	0000
COUNT,	0020
TABLE,	-1440				/ -8OO(10)
		-0620				/ -400
		-0310				/ -200
		-0144				/ -100
		-0120				/ -8O
		-0050				/ -40
		-0024				/ -20
		-0012				/ -10

		/----------------------------------
		/ BCDBIN - CONVERT BCD TO BINARY
		/----------------------------------
BCDBIN,	0000				/ ABC IN BCD CODE IN AC
		DCA TEMPPP
		TAD TEMPPP			/ 16(16A + B) + C
		AND MASKKA			/ 16(16A)
		CLL RAR				/ 8(16A)
		DCA TEMPPQ
		TAD TEMPPQ			/ 8(L6A)
		RTR					/ 2(16A)
		TAD TEMPPQ			/ 10(16A)
		TAD TEMPPP			/ 16(26A + B) + C
		AND MASKKB			/ 16(26A + B)
		DCA TEMPPQ
		TAD TEMPPQ			/ 16(26A + B)
		CLL RAR				/ 8(26A + B)
		TAD TEMPPQ			/ 24(26A + B)
		RTR					/ 6 (26A + B)
		CIA					/ 6(26A + B)
		TAD TEMPPP			/ 16(16A + B) + C -6(26A+ B)
							/ = 16X16A - 6X26A + 16B - 6XB+C
							/ = 100A + LOB + C
		JMP I BCDBIN		/ BINARY VALUE IN AC
TEMPPP,	0000
TEMPPQ,	0000
MASKKA,	7400				/ MASK FOR MOST SIG. FOUR BITS
MASKKB,	7760				/ MASK FOR MOST SIG. EIGHT BITS



/===========================================================
/	GPS INTERFACE, LOOP TO TTY
/===========================================================
GPSTTY,	GPSSKP				/ ANYTHING FROM THE GPS?
		JMP .-1
		GPSRCV				/ GET THE CHARACTER
		TLS					/ WRITE AC TO THE OUTPUT DEVICE (TTY)
		TSF					/ IF TTY IS READY, SKIP NEXT INSTRUCTION.
		JMP .-1				/ TTY IS NOT READY, SO CHECK AGAIN
		JMP GPSTTY


/===========================================================
/ LOGICAL XOR FUNCTION
/===========================================================
XORFUN,	0000
		CLA					/ CLEAR ACCUMULATOR (AC) SINCE ALL WE HAVE IS ADD!
		TAD ARG1			/ ADD (TAD) ARGONE TO THE JUST-ZEROED AC
		AND ARG2			/ AND ARGTWO TO DETERMINE WHERE THE CARRYS WILL BE
		CLL RAL				/ CLEAR THE LINK (CLL) AND ROTATE THE ACCUMULATOR LEFT (RAL)
		CMA IAC				/ COMPLIMENT (CMA) & INCREMENT (IAC) THE ACCUMULATOR (NEGATE)
		TAD ARG1			/ ADD THE FIRST ARGUMENT TO THE NEGATED ACCUMULATOR
		TAD ARG2			/ AND ADD THE SECOND ARGUMENT AS WELL
		JMP I XORFUN		/ THE ACCUMULATOR NOW CONTAINS THE XOR OF ARGONE & ARGTWO


		PAGE
/===========================================================
/ DISPLAY - DISPLAY THE AC ON 7 SEG, JMS I DISPLAY
/===========================================================
SEGV0,	0
DISPA,	DISP6
DISP6,	0000	/ 6 X 7 SEGMENT DISPLAY
		0000
		0000
		0000
		0000
		0000

SEGFUN,	0
		DCA SEGV0
		TAD DISPA
		DCA AIX2
		TAD SEGV0			/ DISPLAY THE AC, BOTTOM 3 DISPLAYS
		JMS SVX
		RTR
		RTR
		JMS SVX
		RTR
		RTR
		JMS SVX
		CLA
		TAD SEGFUN			/ DISPLAY CALLER, TOP 3 DISPLAYS
		JMS SVX
		RTR
		RTR
		JMS SVX
		RTR
		RTR
		JMS SVX

		CLA
		TAD DISPA
		DCA AIX2
		CLA
		TAD I AIX2
		D10S0				/ DISPLAY 0
		CLA
		TAD I AIX2
		D10S1				/ DISPLAY 1
		CLA
		TAD I AIX2
		D10S2				/ DISPLAY 2
		CLA
		TAD I AIX2
		D10S3				/ DISPLAY 3
		CLA
		TAD I AIX2
		D10S4				/ DISPLAY 4
		CLA
		TAD I AIX2
		D10S5				/ DISPLAY 5

		CLA
		TAD SEGV0
		JMP I SEGFUN


		/ DISPLAY THE CURRENT TIME
DTIME,	0000
		TAD DISPA
		DCA AIX2
		CLA					/ DISPLAY SECOND
		TAD SECOND
		JMS SVX
		RTR
		RTR
		JMS SVX
		CLA					/ DISPLAY MINUTE
		TAD MINUTE
		JMS SVX
		RTR
		RTR
		JMS SVX
		CLA					/ DISPLAY HOUR
		TAD HOUR
		JMS SVX
		RTR
		RTR
		JMS SVX


		CLA
		TAD DISPA
		DCA AIX2
		CLA
		TAD I AIX2
		D10S0				/ DISPLAY H1
		CLA
		TAD I AIX2
		D10S1				/ DISPLAY H0
		CLA
		TAD I AIX2
		D10S2				/ DISPLAY M1
		CLA
		TAD I AIX2
		D10S3				/ DISPLAY M0
		CLA
		TAD I AIX2
		D10S4				/ DISPLAY S1
		CLA
		TAD I AIX2
		D10S5				/ DISPLAY S0

		JMP I DTIME



/ SVX - ADD 4 BIT HEX VALUE TO THE DISPLAY
SEGV1,	0
SVMASK,	0017
SVX,	0000
		DCA SEGV1
		TAD SEGV1
		AND SVMASK
		JMS SEG7
		DCA I AIX2
		TAD SEGV1
		JMP I SVX

		PAGE
/===========================================================
/ SEG7 - CONVERT AC INTO 7 SEGMENT DISPLAY
/===========================================================
SEG7,	0000
		AND K0037
		TAD S7TAA
		DCA S7IDX
		TAD I S7IDX
		JMP I SEG7
S7TAA,	S7TAB
S7IDX,	0000

/ HEX DISPLAY CONSTANTS, COMMON ANODE
/ ENCODED AS "000_0PG_FED_CBA"
S7TAB,	0077	/ 0
		0006	/ 1		-- A --
		0133	/ 2		|	  |
		0117	/ 3		F	  B
		0146	/ 4		|	  |
		0155	/ 5		-- G --
		0175	/ 6		|	  |
		0007	/ 7		E	  C
		0177	/ 8		|	  |
		0147	/ 9		-- D -P
		0167	/ A
		0174	/ B
		0071	/ C
		0136	/ D
		0171	/ E
		0161	/ F
		/ EXTRA SYMBOLS
		0100	/ -
		0163	/ P
		0000	/ ' '


/===========================================================
/ CIRCULAR BUFFER FOR GPS INTERRUPT CHARACTERS
/	16 CHARACTER IN LENGTH
/	THE BUFFER MUST BE ALIGNED TO 16 TO ALLOW
/	THE BOTTOM 4 BITS OF THE INDEXES TO BE USED
/	AS A MOD 16 COUNTER, THE "PAGE" 128 WORD ALIGNS
/===========================================================
	PAGE
INTBUF,	0000				/ GPS INTERRUPT BUFFER
		0000				/ !!! THIS BUFFER MUST BE X16 ALIGNED !!!
		0000
		0000
		0000
		0000
		0000
		0000
		0000
		0000
		0000
		0000
		0000
		0000
		0000
		0000
IBEND,						/ END OF BUFFER

T3,		0000
IBADDR,	INTBUF
INPTR,	INTBUF
OUTPTR,	INTBUF

/ NEWCH - ADD A CHARACTER TO THE BUFFER
NEWCH,	0000
		/ D10LED
		DCA I INPTR			/ SAVE THE NEW CHARACTER
		TAD INPTR			/ UPDATE THE POINTER
		IAC
		AND K0017			/ WRAP
		TAD IBADDR
		DCA INPTR
		JMP I NEWCH			/ RETURN


/ GETCH - GET A CHARACTER FROM THE BUFFER
GETCH,	0000
		CLA
		TAD OUTPTR
		CIA
		TAD INPTR
		/ D10LED
		SZA
		JMP GETCH1
		NL7777
		JMP I GETCH			/ RETURN EOF (7777)

GETCH1,	CLA
		TAD I OUTPTR
		DCA T3
		TAD OUTPTR
		IAC
		AND K0017
		TAD IBADDR
		DCA OUTPTR
		TAD T3
		JMP I GETCH



		*7400
MSGBUF,	0000				/ 128 WORD MESSAGE BUFFER


		*7776
		0200
		JMP I .-1

		$
