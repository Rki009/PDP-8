/ PDP-8 - GPS CLOCK
/	RON K. IRVINE, (C) COPYRIGHT 2021
/	ALL RIGHTS RESERVED
/
/

/GPS INTERFACE
GPSSKP=6431					/ GPS - SKIP IF CHAR AVAILABLE
GPSKIE=6435					/ GPS - INTERUPT ENABLE
GPSRCV=6436					/ GPS - READ CHARACTER AND CLEAR THE FLAG
GPSTCF=6442					/ GPS - Clear the printer flag
	
D10S0=6470					/ DE10 - 7 segment 0
D10S1=6471					/ DE10 - 7 segment 1
D10S2=6472					/ DE10 - 7 segment 2
D10S3=6473					/ DE10 - 7 segment 3
D10S4=6474					/ DE10 - 7 segment 4
D10S5=6475					/ DE10 - 7 segment 5
D10LED=6477					/ DE10 - output to leds


/ Some Constants
NL0000=7300					/ 0000, CLA CLL
NL0001=7301					/ 0001, CLA CLL lAC
NL0002=7305					/ 0002, CLA CLL lAC RAL
NL0003=7325					/ 0003, CLA CLL CML lAC RAL
NL0004=7307					/ 0004, CLA CLL lAC RTL
NL0006=7327					/ 0006, CLA CLL CML lAC RTL
NL0100=7303					/ 0100, CLA lAC BSW
NL2000=7332					/ 1024, CLA CLL CML RTR
NL3777=7360					/ 2047, CLA CLL CMA RAR
NL4000=7330					/ -0,	CLA CLL CML RAR
NL6777=7362					/ -1026, CLA CLL CMA RTL
NL6000=7333					/ -1024, CLA CLL CML lAC RTR
NL7775=7346					/ -3, CLA CLL CMA RTL
NL7776=7344					/ -2, CLA CLL CMA RAL
NL7777=7340					/ -1, CLA CLL CMA

/ KIE=6035					/ for Keyboard

		*0000
		0000				/ Interrupt return address
		JMP I .+1
		IRQSVR				/ Interrupt Service Routine

SAVEAC,	0000
SAVEL,	0000
IRQCNT,	0000				/ Count interrupts

		*0010
AIX1,	0000				/ TEMP for auto indexing

		*0020
ARG1,	0000				/ Function Arguments
ARG2,	0000
ARG3,	0000
ARG4,	0000

TMP1,	0000				/ TEMP Variables
TMP2,	0000


CHAR,	0000				/ IF !=0, RECIEVED CHARACTER

/ Constants
BMASK,	0377
CMASK,	0177
DOLLAR,	"$					/ GPS MESSAGE start
STAR,	"*					/ GPS MESSAGE end, checksum
CR,		215					/ CARRAGE RETURN
K0200,	0200
K5252,	5252
K0037,	0037
K0300,	0300
INDEX,	0					/ GENERAL INDEX

/ GPS MESSAGE BUFFER
GPSBUF,	MSGBUF				/ USE BIN/RIM LOADER SPACE
GPSCNT,	0					/ CHARS IN THE BUFFER
STATE,	STATE0				/ CURRENT STATE; 0 = IDLE, 1 = '$', 2 = '*'
SADDR0,	STATE0
SADDR1,	STATE1
SADDR2,	STATE2
SADDR3,	STATE3
GPSSUM,	0					/ GPS CHECKSUM (SUM BETWEEN '$' AND '*')
GPSCHK,	0					/ GPS CHECKSUM (SUM BETWEEN '$' AND '*')
DOGPS,	0					/ FLAG FOR GPS MESSAGE READY TO PROCESS

// GPS TIME
HOUR,	0000				/ HOUR IN BCD
MINUTE,	0000				/ MINUTE IN BCD
SECOND,	0000				/ SECOND IN BCD
K0017,	0017
TZ,		7					/ BANGKOK
HR24,	-24


// HEXF=	JMS I .;	HEXFUN
HEXF,	HEXFUN				/ CONVERT AC HEX CHAR TO VALUE
XOR,	XORFUN				/ exclusive OR function
DISPLAY,SEGFUN				/ DISPLAY THE ac ON 7 SEGMENTS
BIN2BCD,BINBCD				/ CONVERT BIN TO BCD
BCD2BIN,BCDBIN				/ CONVERT BCD TO BIN

// HEXF=	JMS I .;	HEXFUN

/==============================================
/	Start
/==============================================
		*0200				/ LOCATE PROGRAM STARTING AT ADDR 200
START,	CLA					/ CLEAR ACCUMULATOR
		CLL					/ CLEAR AC LINK
		D10S0				/ CLEAR 7 SEG DISPLAY
		D10S1				/ CLEAR 7 SEG DISPLAY
		D10S2				/ CLEAR 7 SEG DISPLAY
		D10S3				/ CLEAR 7 SEG DISPLAY
		D10S4				/ CLEAR 7 SEG DISPLAY
		D10S5				/ CLEAR 7 SEG DISPLAY
		LAS
		D10LED				/ CLEAR LEDR
		AND K0037
		DCA TZ				/ SAVE SR[4..0]
		GPSTCF				/ GPS - Clear the printer flag
		CLA IAC				/ AC = 1 (ENABLE)
		GPSKIE				/ GPS - INTERRUPT ENABLE
		TAD HELLO			/ HELLO STRING
		JMS PUTS
		CLA CMA
		KIE					/ ENABLE TTY INTERRUPTS
		ION

MAIN,	CLA CLL
		TAD CHAR			/ WAIT FOR NEXT CHARACTER
		SNA
		JMP MAIN2
		TLS					/ ECHO - WRITE AC TO THE OUTPUT DEVICE (TTY)
		CLA
		TAD CHAR
		CLA					/ CHAR <= 0, INDICATE FINISHED
		DCA	CHAR
MAIN2,	CLA CLL
		TAD DOGPS
		SNA					/ MESSAGE WAITING?
		JMP MAIN
		JMS NMEA			/ PROCESS GPS MESSAGE
		CLA CLL
		DCA DOGPS			/ CLEAR THE FLAG
		JMP MAIN			/ Wait for Interrupt


ECHO,	KSF					/ ANY CHARACTERS?
		JMP .-1
		KRB					/ READ THE CHAR
		TLS					/ WRITE AC TO THE OUTPUT DEVICE (TTY)
		TSF					/ IF TTY IS READY, SKIP NEXT INSTRUCTION.
		JMP .-1				/ TTY IS NOT READY, SO CHECK AGAIN
		JMP ECHO


PUTS,	0000				/ RETURN ADDRESS
		DCA AIX1			/ STORE THAT IN AUTOINDEX REG 1
PUTS1,	TAD I AIX1			/ INCR ADDR IN AIX1, THEN LOAD AC FROM THAT
		AND CMASK
		SNA					/ IF AC IS NOT ZERO, SKIP NEXT INSTRUCTION
		JMP I PUTS			/ RETURN
		JMS TTYO			/ CALL OUTPUT ROUTINE
		JMP PUTS1			/ REPEAT LOOP

NEXT,	HLT					/ HALT IF SIMULATION
		/ JMP GPS
		/ JMP ECHO

DONE,	HLT					/ THAT'S ALL FOLKS!
		JMP START			/ RESTART


TTYO,	0					/ TTY OUTPUT ROUTINE. THE FIRST WORD OF
							/ A SUBROUTINE MUST BE EMPTY (0) BECAUSE
							/ THE JMS INSTRUCTION INSERTS THE RETURN
							/ ADDR IN THIS WORD.
		TLS					/ WRITE AC TO THE OUTPUT DEVICE (TTY)
		TSF					/ IF TTY IS READY, SKIP NEXT INSTRUCTION.
		JMP .-1				/ TTY IS NOT READY, SO CHECK AGAIN
		CLA					/ CLEAR AC
		JMP I TTYO			/ RETURN TO CALLER

		HLT

HELLO,	.					/ 1ST WORD IS ADDR OF STRING
		015					/ <CR>
		012					/ <LF>
		110					/ H
		105					/ E
		114					/ L
		114					/ L
		117					/ O
		040					/ 
		127					/ W
		117					/ O
		122					/ R
		114					/ L
		104					/ D
		041					/ !
		015					/ <CR>
		012					/ <LF>
		000					/ <EOT>


		PAGE
/==============================================
/	Interrupt Service Routine
/==============================================
IRQSVR,	DCA SAVEAC
		RAL
		DCA SAVEL

		/ PRINTER DONE?
		TSF
		JMP .+2
		TCF

		/ KEYBOARD?
		KSF					/ ANY CHARACTERS?
		JMP IRQ1
		CLA
		KRB					/ READ THE CHAR
		DCA	CHAR

		/ GPS ...
IRQ1,	GPSTCF				/ GPS - Clear the printer flag
		GPSSKP				/ GPS - SKIP IF CHAR AVAILABLE
		JMP RETI
		GPSRCV				/ GPS - READ CHARACTER AND CLEAR THE FLAG
		AND CMASK			/ 7 BIT ASCII
		TAD K0200			/ SET BIT 7 HIGH
		DCA	CHAR
		// ready to process interrupt
		TAD CHAR			/ IF CR, RESET TO STATE 0
		CIA
		TAD CR
		SZA
		JMP I STATE
		TAD SADDR0
		DCA STATE
		JMP RETI

		/ SEARCH FOR '$', START OF MESSAGE
STATE0,	CLA
		TAD CHAR			/ IF '$', NEXT STATE
		CIA
		TAD DOLLAR
		SZA
		JMP RETI
		TAD SADDR1
		DCA STATE
		DCA GPSSUM
		DCA GPSCNT
		JMP RETI

		/ COLLECT MESSAGE
STATE1,	CLA
		TAD CHAR			/ IF '*', NEXT STATE
		CIA
		TAD STAR
		SZA
		JMP ST001
		TAD SADDR2
		DCA STATE
		JMP RETI
ST001,	CLA
		/ TAD CHAR			/ ADD ANOTHER CHARACTER TO THE CHECKSUM
		/ AND CMASK			/ JUST 7 BIT ASCII SUM
		/ TAD GPSSUM
		/ AND BMASK			/ SUM IS 8 BITS ONLY
		/ DCA GPSSUM
		TAD CHAR			/ CHECKSUM IS XOR OF ALL CHARS BETWEEN '$' AND '*'
		AND CMASK			/ JUST 7 BIT ASCII SUM
		DCA ARG1
		TAD GPSSUM
		DCA ARG2
		JMS I XOR
		AND BMASK			/ SUM IS 8 BITS ONLY
		DCA GPSSUM
		TAD	GPSBUF
		TAD GPSCNT			/ INCREMENT THE COUNT
		DCA	INDEX
		TAD GPSCNT
		IAC
		AND CMASK			/ LIMIT TO 128 CHARACTERS
		DCA GPSCNT
		TAD CHAR
		DCA I INDEX			/ SAVE THE CHARACTER
		JMP RETI


		/ GET 2 HEX CHECKSUM CHARS
STATE2,	CLA					/ 1'ST HEX OF CHECKSUM
		TAD SADDR3
		DCA STATE
		TAD CHAR
		JMS I HEXF
		CLL RTL
		RTL
		DCA GPSCHK
		JMP RETI

STATE3,	CLA					/ 2'ND HEX OF CHECKSUM
		TAD SADDR0
		DCA STATE
		TAD CHAR			/ CONVERT TO HEX VALUE
		JMS I HEXF
		TAD GPSCHK
		DCA GPSCHK			/ ADD 2 HEX VALUES
		CLA
		TAD GPSSUM
		CIA					/ COMPARE TO CALCULATED VALUE
		TAD GPSCHK			/ AC==0, CHECKSUM IS OK!!!
		DCA GPSCHK
		TAD GPSCHK			/ IF MESSAGE OK
		SNA
		// JMS NMEA			/ PROCESS THE MESSAGE
		ISZ DOGPS			/ HANDLE IN MAIN LOOP
		NOP
		JMP RETI


RETI,	CLA CLL
		TAD SAVEL
		RAR
		TAD SAVEAC
		ION					/Interrupts back on after JMP
		JMP I 0				/Return from interrupt



		PAGE
		// HEXFUN - CONVERT ASCII TO HEX
HEX0,	0
MZERO,	-0060				/ - '0'
MSEVEN,	-0007				/ -7
MNINE,	-0011				/ -9
HEXFUN,	0
		AND CMASK
		TAD MZERO
		DCA HEX0
		TAD HEX0
		TAD MNINE
		SMA					/ + = A-F
		JMP HEXAF
		CLA
		TAD HEX0			/ RETURN THE HEX
		JMP I HEXFUN

HEXAF,	CLA
		TAD HEX0
		TAD MSEVEN
		JMP I HEXFUN


/==============================================
/	NMEA MESSAGE
/	$GPRMC,055223.00,A,2345.25774,N,12345.17913,E,1.826,,060221,,,A*7A
/==============================================
GPRMC,	4235				/ HASH VALUE OF "GPRMC"
NMEA,	0
		/ CLA
		/ TAD GPSCNT
		CLA CLL CMA			/ -1
		TAD GPSBUF			/ POINT TO START OF BUFFER
		DCA AIX1			/ USE AUTOINC INDEXING AND HASH THE 1ST 5 CHARS
		TAD I AIX1			/ SHOULD BE THE 1ST CHARACTER 'G'
		RAL
		TAD I AIX1			/ SHOULD BE THE 1ST CHARACTER 'P'
		RAL
		TAD I AIX1			/ SHOULD BE THE 1ST CHARACTER 'R'
		RAL
		TAD I AIX1			/ SHOULD BE THE 1ST CHARACTER 'M'
		RAL
		TAD I AIX1			/ SHOULD BE THE 1ST CHARACTER 'C', HASH = 4235
		/ D10LED
		CIA					/ NEGATE
		TAD GPRMC
		SZA					/ IF "GPRMC" MESSAGE ...
		JMP I NMEA			/ NOPE, NOT OUR MESSAGE

		/ TIME SHOULD BE NEXT FIELD
		TAD I AIX1			/ IGNORE THE COMMA

		/ COLLECT "HHMMSS" AS BCD HOUR,MINUTE,SECOND
		CLA					/ HOUR
		TAD I AIX1
		AND	K0017
		RTL
		RTL
		DCA HOUR
		TAD I AIX1
		AND	K0017
		TAD HOUR
		DCA HOUR			/ SAVE HOUR IN BCD

		TAD I AIX1			/ MINUTE
		AND	K0017
		RTL
		RTL
		DCA MINUTE
		TAD I AIX1
		AND	K0017
		TAD MINUTE
		DCA MINUTE			/ SAVE MINUTE IN BCD

		TAD I AIX1			/ SECOND
		AND	K0017
		RTL
		RTL
		DCA SECOND
		TAD I AIX1
		AND	K0017
		TAD SECOND
		DCA SECOND			/ SAVE SECOND IN BCD

		/ ADJUST FOR TIMEZONE AND DISPLAY
		JMS ADJTZ			/ ADJUST FOR TIMEZONE
		JMS DTIME
		JMP I NMEA


		/ ADJUST HOUR FOR TIME ZONE
ADJTZ,	0000				/ NOW ADD TIMEZONE
		CLA CLL
		TAD HOUR
		JMS BCDBIN			/ CONVERT BCD TO BINARY
		TAD	TZ				/ ADD TIMEZONE ADJUST IN BINARY
		DCA TMP1			/ CHECK FOR 24HR OVERFLOW
		TAD TMP1
		TAD HR24			/ SUBTRACT 24HR
		SNA					/ IF <24HR, LOAD ORIGINAL VAULE, OTHERWISE NEW (HOUR-24) VALUE
		JMP .+3
		CLA
		TAD TMP1
		JMS BINBCD			/ CONVERT BACK TO BCD
		DCA HOUR
		JMP I ADJTZ

		/ DISPLAY THE CURRENT TIME
DTIME,	0000
		CLA					/ DISPLAY HOUR
		TAD HOUR
		D10S4
		RTR
		RTR
		D10S5
		CLA					/ DISPLAY MINUTE
		TAD MINUTE
		D10S2
		RTR
		RTR
		D10S3
		CLA					/ DISPLAY SECOND
		TAD SECOND
		D10S0
		RTR
		RTR
		D10S1
		JMP I DTIME


/==============================================
/	BCD MATH
/==============================================
		PAGE
		/BINARY TO BCD CONVERSION 3/6/65-DEC
		/ENTER WITH BINARY NUMBER Â«999(10))
		/IN ACCUMULATOR; EXIT WITH THREE CHARACTER
		/BCD NUMBER IN ACCUMULATOR
		/AC 0-3; AC 4-7; AC 8-11 WILL CONTAIN
		/THE BCD CHARACTERS ON EXIT
		/WEIGHTING: AC 0-3 100
		/			AC4-7 10
		/			AC 8-11 1
		/STORAGE 33(10) REGISTERS

		/TIME=216.0-235.2 MICRO-SECONDS PDP-8
		/IF INPUT >999 (10) RESULT IS UNSPECIFIED
/EXAMPLE:	INPUT 0726 (8)
/			OUTPUT 0100/0111/0000 = 470 (10)
BINBCD,	0000
		DCA INPUT			/ STORE BINARY
		TAD CONTRL			/ SET UP TABLE
		DCA POINTR			/ POINTERS
		CLL	
		TAD COUNT			/ SET BIT 7=1; 8RALS
		DCA NUMBER			/ WILL PUT IT IN LINK
		TAD INPUT	
POINTR,	TAD TABLE			/ OR TABLE+1, TABLE+2, ETC.
		SZL					/ IF C(L)=1, INPUT>-TABLE
		DCA INPUT			/ IF SO: INPUT=INPUT+TABLE
		CLA	
		TAD NUMBER	
		RAL					/ PUT THIS BIT IN ANSWER
		ISZ POINTR			/ UPDATE TABLE POINTER
		SNL					/ IF LINK=1, ALL DONE
		JMP POINTR-2	
		CLL RTL				/ CONVERTED 2 BCD
		RTL					/ CHARACTERS
		TAD INPUT			/ SHIFT LEFT AND ADD
		JMP I BINBCD		/ THE THIRD
CONTRL, TAD TABLE
INPUT,	0000
NUMBER,	0000
COUNT,	0020
TABLE,	-1440				/ -8OO(10)
		-0620				/ -400
		-0310				/ -200
		-0144				/ -100
		-0120				/ -8O
		-0050				/ -40
		-0024				/ -20
		-0012				/ -10

BCDBIN,	0000				/ ABC IN BCD CODE IN AC
		DCA TEMPPP
		TAD TEMPPP			/ 16(16A + B) + C
		AND MASKKA			/ 16(16A)
		CLL RAR				/ 8(16A)
		DCA TEMPPQ
		TAD TEMPPQ			/ 8(l6A)
		RTR					/ 2(16A)
		TAD TEMPPQ			/ 10(16A)
		TAD TEMPPP			/ 16(26A + B) + C
		AND MASKKB			/ 16(26A + B)
		DCA TEMPPQ
		TAD TEMPPQ			/ 16(26A + B)
		CLL RAR				/ 8(26A + B)
		TAD TEMPPQ			/ 24(26A + B)
		RTR					/ 6 (26A + B)
		CIA					/ 6(26A + B)
		TAD TEMPPP			/ 16(16A + B) + C -6(26A+ B)
							/ = 16x16A - 6x26A + 16B - 6xB+C
							/ = 100A + lOB + C
		JMP I BCDBIN		/ BINARY VALUE IN AC
TEMPPP,	0000
TEMPPQ,	0000
MASKKA,	7400				/ MASK FOR MOST SIG. FOUR BITS
MASKKB,	7760				/ MASK FOR MOST SIG. EIGHT BITS



/==============================================
/	GPS Interface, LOOP TO TTY
/==============================================
GPS,	GPSSKP				/ ANYTHING FROM THE GPS?
		JMP .-1
		GPSRCV				/ GET THE CHARACTER
		TLS					/ WRITE AC TO THE OUTPUT DEVICE (TTY)
		TSF					/ IF TTY IS READY, SKIP NEXT INSTRUCTION.
		JMP .-1				/ TTY IS NOT READY, SO CHECK AGAIN
		JMP GPS


/ Logical XOR Function
XORFUN,	0000
		CLA					/ clear accumulator (AC) since all we have is add!
		TAD ARG1			/ add (TAD) ArgOne to the just-zeroed AC
		AND ARG2			/ AND ArgTwo to determine where the carrys will be
		CLL RAL				/ clear the LINK (CLL) and rotate the accumulator left (RAL)
		CMA IAC				/ compliment (CMA) & increment (IAC) the accumulator (negate)
		TAD ARG1			/ add the first argument to the negated accumulator
		TAD ARG2			/ and add the second argument as well
		JMP I XORFUN		/ the accumulator now contains the XOR of ArgOne & ArgTwo

/ DISPLAY - DISPLAY THE AC ON 7 SEG, JMS I DISPLAY
SEGV0,	0
SEGV1,	0
SEGFUN,	0
		DCA SEGV0
		TAD SEGV0			/ DISPLAY THE AC, BOTTOM 3 DISPLAYS
		D10S0
		RTR
		RTR
		D10S1
		RTR
		RTR
		D10S2
		CLA
		TAD SEGFUN			/ DISPLAY CALLER, TOP 3 DISPLAYS
		D10S3
		RTR
		RTR
		D10S4
		RTR
		RTR
		D10S5
		CLA
		TAD SEGV0
		JMP I SEGFUN

		*7400
MSGBUF,	0000				/ 128 WORD MESSAGE BUFFER


		*7776
		0200
		JMP I .-1

		$
